name: AppImage Monitoring

on:
  schedule:
    # Run twice per day (morning and evening)
    - cron: '0 8,20 * * *'
  workflow_dispatch:
    # Allow manual triggering with options
    inputs:
      check_frequency:
        description: 'Check frequency (daily/weekly)'
        required: false
        default: 'daily'
        type: choice
        options:
        - daily
        - weekly
  push:
    branches: [ main ]
    paths: 
      - 'scripts/**'
      - '.github/workflows/**'

# Prevent multiple runs from interfering
concurrency:
  group: monitor-workflow
  cancel-in-progress: true

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: write  # Needed to trigger other workflows
    
    outputs:
      apps_to_convert: ${{ steps.check_apps.outputs.apps_to_convert }}
      conversion_needed: ${{ steps.check_apps.outputs.conversion_needed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        cd scripts
        pip install -r requirements.txt
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
    
    - name: Check for existing updates
      id: check_updates
      run: |
        cd scripts
        
        # Check if we have pending applications
        if [ -f ../website/data/applications.json ]; then
          pending_count=$(python3 -c 'import json; data=json.load(open("../website/data/applications.json")); print(len([app for app in data.get("applications", []) if app.get("conversion_status") == "pending"]))')
          echo "pending_apps=$pending_count" >> $GITHUB_OUTPUT
          
          # Check last update time (hours since last update)
          last_update=$(python3 -c 'import json; from datetime import datetime, timezone; from dateutil import parser; data=json.load(open("../website/data/applications.json")); last_updated=data.get("metadata", {}).get("last_updated", ""); print(int((datetime.now(timezone.utc) - parser.parse(last_updated)).total_seconds() / 3600) if last_updated else 999)' 2>/dev/null || echo "999")
          echo "hours_since_update=$last_update" >> $GITHUB_OUTPUT
        else
          echo "pending_apps=0" >> $GITHUB_OUTPUT
          echo "hours_since_update=999" >> $GITHUB_OUTPUT
        fi
    
    - name: Run AppImage monitoring
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd scripts
        python monitor.py
      continue-on-error: true
    
    - name: Check if monitoring found new apps
      id: check_new_apps
      run: |
        if [ -n "$(git status --porcelain website/data/applications.json)" ]; then
          echo "new_apps_found=true" >> $GITHUB_OUTPUT
        else
          echo "new_apps_found=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Analyze applications needing conversion
      id: check_apps
      run: |
        cd scripts
        
        # Get list of pending apps and their architectures
        apps_json=$(python3 list_pending_apps.py)
        echo "apps_to_convert=$apps_json" >> $GITHUB_OUTPUT
        
        # Check if any conversions are needed
        if echo "$apps_json" | jq -e '. | length > 0' > /dev/null; then
          echo "conversion_needed=true" >> $GITHUB_OUTPUT
        else
          echo "conversion_needed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit monitoring changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "Monitor: Found new AppImages - $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
        else
          echo "No changes to commit"
        fi
  
  trigger-conversions:
    if: needs.monitor.outputs.conversion_needed == 'true'
    needs: monitor
    runs-on: ubuntu-latest
    permissions:
      actions: write
    
    strategy:
      matrix:
        architecture: ['x86_64', 'aarch64', 'armv7l']
    
    steps:
    - name: Filter apps for this architecture
      id: filter_apps
      run: |
        apps='${{ needs.monitor.outputs.apps_to_convert }}'
        filtered_apps=$(echo "$apps" | jq -c "[.[] | select(.architecture == \"${{ matrix.architecture }}\")]")
        echo "apps_for_arch=$filtered_apps" >> $GITHUB_OUTPUT
        
        if echo "$filtered_apps" | jq -e '. | length > 0' > /dev/null; then
          echo "has_apps=true" >> $GITHUB_OUTPUT
        else
          echo "has_apps=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Trigger conversion workflow
      if: steps.filter_apps.outputs.has_apps == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        apps='${{ steps.filter_apps.outputs.apps_for_arch }}'
        
        curl -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/convert-appimages.yml/dispatches \
          -d "{
            \"ref\": \"${{ github.ref_name }}\",
            \"inputs\": {
              \"target_architecture\": \"${{ matrix.architecture }}\",
              \"apps_to_convert\": $(echo "$apps" | jq -c .)
            }
          }"
    
    - name: Create detailed summary
      if: always()
      run: |
        echo "## 📦 AppBinHub Monitor Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture:** ${{ matrix.architecture }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Apps for this arch:** ${{ steps.filter_apps.outputs.has_apps }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.filter_apps.outputs.has_apps }}" == "true" ]; then
          echo "- **Status:** ✅ Conversion workflow triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Apps to convert:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.filter_apps.outputs.apps_for_arch }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status:** ⏸️ No apps for this architecture" >> $GITHUB_STEP_SUMMARY
        fi